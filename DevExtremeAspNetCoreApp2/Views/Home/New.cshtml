@model DevExtremeAspNetCoreApp2.Models.OfficeSurveyModel
@* 
@{
    ViewData["Title"] = "NEW OFFICE INFORMATION";
} *@
@* <h1>@ViewData["Title"]</h1> *@


<html>
<head>
    <meta charset="UTF-8">
    <title>TRC Sustainability</title>
    @* <link rel="stylesheet" href="styles.css"> *@
</head>
<body>
    <header class="header">
        <div class="top-bar">
            <img src="/images/logo-white.svg" alt="TRC Logo" class="logo" />
        </div>
        <div class="nav-bar">
            <div class="app-title">Sustainability Application</div>
            <nav class="nav-links">
                <a href="@Url.Action("Index", "Home")" class="active">Location Info</a>
                <a href="@Url.Action("Index", "MeterReading")">Meter Reading</a>
                <a href="#">Coordinators</a>
                <a href="#">Good Practices</a>
                <a href="#">2025 Earth Day Challenge</a>
                <a href="#">IBT</a>
                <a href="#">Paper Usage</a>
            </nav>
        </div>
    </header>
    <main class="main-container">
        <h3>NEW OFFICE INFORMATION</h3>
        <div class="card-box">
        @* <h3>EDIT OFFICE INFORMATION</h3> *@
        <div id="myFormWrapper" class="tight-form">
            <div id="formContainer" style="margin: 20px;"></div>
        </div>
        @* <div id="saveBtn" style="margin-top: -90px;margin-left:550px"></div> *@
        </div>
    </main>
    <!-- Include DevExtreme resources if not already -->
    <!-- jQuery first -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- DevExtreme CSS -->
    @* <link rel="stylesheet" href="https://cdn3.devexpress.com/jslib/22.2.15/css/dx.light.css" /> *@
    <link href="~/css/devextreme/dx.light.css" rel="stylesheet" />

    <!-- DevExtreme JS -->
    @* <script src="https://cdn3.devexpress.com/jslib/22.2.15/js/dx.all.js"></script> *@
    <script src="~/js/devextreme/dx.all.js"></script>


    <script>
                $("#formContainer").dxForm({
            formData: {
                Status: "New"   // default value for new form
                // you can add other default fields here if needed
            },
            //colCount: 4,
            onContentReady: function(e) {
                // apply after the form is fully rendered
                $(e.element)
                  .find(".dx-item.dx-box-item")
                  .eq(0) // first group wrapper, adjust index if needed
                  .css("margin-bottom", "-120px");

        //               $(e.element)
        // .find(".dx-item.dx-box-item")
        // .eq(2)
        // .css("margin-bottom", "200px");
            },
            cssClass: "tight-form",
            items: [
                {
                    itemType: "group",
                    // caption: "Create New Office",
                    colCount: 4,
                    cssClass: "edit-office-group",
                    items: [
                        {
                            dataField: "officeID",
                            label: { text: "Office ID" },
                            colSpan: 4,
                            editorOptions: {
                                width: 170
                            },
                                 validationRules: [
            {
                type: "required",
                message: "Office ID is required"
            }
        ]
                        },
                        { dataField: "adpWorkCode", label: { text: "Adp Work Code" } },
                        { dataField: "visionCode", label: { text: "Vision Code" }},
                        { dataField: "adpHeadCount", label: { text: "Adp Head Count" } },
                        { dataField: "visionHeadCount", label: { text: "Vision Head Count" } },
                        { dataField: "ohPhase", label: { text: "OH Phase" },validationRules: [
            {
                type: "required",
                message: "OH Phase is required"
            }
        ] },
                        { dataField: "ohPhase2", label: { text: "OH Phase 2" } },
                        { dataField: "ohPhase3", label: { text: "OH Phase 3" } },
                        { dataField: "ohPhase4", label: { text: "OH Phase 4" } },

                        // ✅ Status dropdown with default "New"
                        // {
                        //     dataField: "Status",
                        //     editorType: "dxSelectBox",
                        //     label: { text: "Status" },
                        //     editorOptions: {
                        //         dataSource: ["New", "Open", "Closed"],
                        //         value: "New",     // default when creating
                        //         searchEnabled: false
                        //     }
                        // },

                        {
                            dataField: "comments",
                            editorType: "dxTextArea",
                            colSpan: 4,
                            editorOptions: {
                                height: 45
                            }
                        }
                    ]
                },
                    {
        itemType: "group",
        caption: "Location Information",
        colCount: 4,
        items: [
                 // row 1
        { dataField: "Street" ,colSpan:1},
            { dataField: "addressLine1", label: { text: "Address line 1" },colSpan:2 },
            { dataField: "addressLine2", label: { text: "Address line 2" } ,colSpan:1},
        //{ dataField: "City" },
        // row 2
                        { dataField: "postalCode",label:{text:"Zip"},colSpan:1,validationRules: [
            {
                type: "required",
                message: "Zip is required"
            }
        ] },
                        { dataField: "stateProvince",label:{text:"State"},colSpan:1,validationRules: [
            {
                type: "required",
                message: "State is required"
            }
        ] },
                                {
            dataField: "country",
            editorType: "dxSelectBox",colSpan:1,
            editorOptions: {
                    dataSource: ["Canada", "China", "India", "United Kingdom", "United States"],
            //value: "India",   // default selected value
            searchEnabled: true // optional: allows searching in dropdown            
            },
            validationRules: [
            {
                type: "required",
                message: "Country is required"
            }
        ]
        },

                        { dataField: "yearBuilt",colSpan:1 },
        // row 3
                          //{ dataField: "primFun",colSpan:1 } ,
                          {
            dataField: "PrimFun",
            editorType: "dxSelectBox",
            colSpan: 1,
            editorOptions: {
                dataSource: new DevExpress.data.CustomStore({
                    loadMode: "raw",
                    load: function () {
                        return $.getJSON("/Home/GetPrimFunList").then(function (data) {
                            // Map string array -> object array with Id + PrimFun
                            const mapped = data.map((item, index) => ({
                                Id: index + 1,   // generate an Id
                                PrimFun: item    // original string
                            }));
                            console.log("Mapped PrimFun data:", mapped);
                            return mapped;
                        });
                    }
                }),
                displayExpr: "PrimFun",   // what user sees
                valueExpr: "Id",          // what you store
                searchEnabled: true,
                placeholder: "Select Primary Function",
                onContentReady: function (e) {
                    if (!e.component.option("value")) {
                        var data = e.component.getDataSource().items();
                        if (data && data.length > 0) {
                            e.component.option("value", data[0].Id);
                            console.log("Default selected:", data[0]);
                        }
                    }
                },
                onValueChanged: function (e) {
                    console.log("Selected value (Id):", e.value);
                    console.log("Selected item:", e.component.option("selectedItem"));
                }
            }
        },





        //                   { dataField: "egridSubregion",colSpan:1, label: { text: "eGRID Subregion" },validationRules: [
        //     {
        //         type: "required",
        //         message: "eGRID Subregion is required"
        //     }
        // ] },
                {
            dataField: "eGRIDSubregion",
            editorType: "dxSelectBox",
            colSpan: 1,
            editorOptions: {
                dataSource: new DevExpress.data.CustomStore({
                    loadMode: "raw",
                    load: function () {
                        return $.getJSON("/Home/GetEgridSubregions").then(function (data) {
                            // If the API returns an array of strings, map them
                            if (typeof data[0] === "string") {
                                data = data.map((item, index) => ({
                                    Id: index + 1,
                                    Subregion: item
                                }));
                            }
                            console.log("Mapped eGRIDSubregion data:", data);
                            return data;
                        });
                    }
                }),
                displayExpr: "Subregion",   // what user sees
                valueExpr: "Id",            // what you store (change to "Subregion" if you want the string instead)
                searchEnabled: true,
                placeholder: "Select eGRID Subregion",
                onContentReady: function (e) {
                    if (!e.component.option("value")) {
                        var data = e.component.getDataSource().items();
                        if (data && data.length > 0) {
                            e.component.option("value", data[0].Id);
                            console.log("Default selected:", data[0]);
                        }
                    }
                },
                onValueChanged: function (e) {
                    console.log("Selected value (Id):", e.value);
                    console.log("Selected item:", e.component.option("selectedItem"));
                }
            },
            validationRules: [
            {
                type: "required",
                message: "Country is required"
            }
        ]
        },

        //                   { dataField: "climateZone",colSpan:1,label:{text:"Climate Zone"},validationRules: [
        //     {
        //         type: "required",
        //         message: "Climate Zone is required"
        //     }
        // ] },
                {
            dataField: "ClimateZone",
            editorType: "dxSelectBox",
            colSpan: 1,
            editorOptions: {
                dataSource: new DevExpress.data.CustomStore({
                    loadMode: "raw",
                    load: function () {
                        return $.getJSON("/Home/GetDistinctClimateZone").then(function (data) {
                            // If the API returns just strings, map them to objects
                            if (typeof data[0] === "string") {
                                data = data.map((item, index) => ({
                                    Id: index + 1,
                                    Zone: item
                                }));
                            }
                            console.log("Mapped ClimateZone data:", data);
                            return data;
                        });
                    }
                }),
                displayExpr: "Zone",   // what user sees in the dropdown
                valueExpr: "Id",       // what you store (use "Zone" if you want the string)
                searchEnabled: true,
                placeholder: "Select Climate Zone",
                onContentReady: function (e) {
                    if (!e.component.option("value")) {
                        var data = e.component.getDataSource().items();
                        if (data && data.length > 0) {
                            e.component.option("value", data[0].Id);
                            console.log("Default selected ClimateZone:", data[0]);
                        }
                    }
                },
                onValueChanged: function (e) {
                    console.log("Selected ClimateZone value:", e.value);
                    console.log("Selected ClimateZone item:", e.component.option("selectedItem"));
                }
            },
            validationRules: [
            {
                type: "required",
                message: "Country is required"
            }
        ]
        },

                          //{ dataField: "htgFuel",colSpan:1 },
                                  {
            dataField: "htgfuel",
            editorType: "dxSelectBox",
            colSpan: 1,
            editorOptions: {
                dataSource: new DevExpress.data.CustomStore({
                    loadMode: "raw",
                    load: function () {
                        return $.getJSON("/Home/GetDistinctHtgFuel").then(function (data) {
                            // If API returns plain strings, map them to objects
                            if (typeof data[0] === "string") {
                                data = data.map((item, index) => ({
                                    Id: index + 1,
                                    Fuel: item
                                }));
                            }
                            console.log("Mapped htgFuel data:", data);
                            return data;
                        });
                    }
                }),
                displayExpr: "Fuel",   // what user sees in the dropdown
                valueExpr: "Id",       // what you store (use "Fuel" if you want the string)
                searchEnabled: true,
                placeholder: "Select Heating Fuel",
                onContentReady: function (e) {
                    if (!e.component.option("value")) {
                        var data = e.component.getDataSource().items();
                        if (data && data.length > 0) {
                            e.component.option("value", data[0].Id);
                            console.log("Default selected htgFuel:", data[0]);
                        }
                    }
                },
                onValueChanged: function (e) {
                    console.log("Selected htgFuel value:", e.value);
                    console.log("Selected htgFuel item:", e.component.option("selectedItem"));
                }
            }
        },

        // row 4
                        { dataField: "officeSF",colSpan:1 },
                        { dataField: "netOfficeSF",colSpan:1 },
                                {
            dataField: "leaseCommenceDate",
            label: { text: "Lease Commence Date" },colSpan:1,
            editorType: "dxDateBox",
            editorOptions: {
                displayFormat: "dd/MM/yyyy",
                type: "date",
                width: "100%"
            }
        },
        {
            dataField: "leaseExpirationDate",
            label: { text: "Lease Expiration Date" },colSpan:1,
            editorType: "dxDateBox",
            editorOptions: {
                displayFormat: "dd/MM/yyyy",
                type: "date",
                width: "100%"
            }
        },
        {
            dataField: "leaseTermDate",
            label: { text: "Lease Termination Date" },colSpan:1,
            editorType: "dxDateBox",
            editorOptions: {
                displayFormat: "dd/MM/yyyy",
                type: "date",
                width: "100%"
            }
        },
                                {
            dataField: "lastSurveyDate",
            label: { text: "Lease Survey date" },colSpan:1,
            editorType: "dxDateBox",
            editorOptions: {
                displayFormat: "dd/MM/yyyy",   // choose format you like
                type: "date",                 // ensures calendar picker
                width: "100%"                 // optional
            }
        },
        { dataField: "energyDataSource",
        editorType: "dxSelectBox",colSpan:1,
            editorOptions: {
                dataSource: new DevExpress.data.CustomStore({
                    loadMode: "raw",
                    load: function () {
                return $.getJSON("/Home/GetEnergyDataSources").then(function(data) {
                    // ✅ return the list for the dropdown
                    return data;
                });
            }
        }),
                searchEnabled: true,
                placeholder: "Select Energy Data Source",
                onContentReady: function(e) {
            // if no value is selected, set the first item
            if (!e.component.option("value")) {
                var data = e.component.getDataSource().items();
                if (data && data.length > 0) {
                    e.component.option("value", data[0]); // select first value
                }
            }}
            }
        },
                
        // row 6
                            { dataField: "estimateElectricUsageBool",colSpan:1, editorType: "dxCheckBox", label: { text: "Estimate Electric Usage" },cssClass: "mt-estimate-electric"  },
                            { dataField: "estimateGasUsageBool",colSpan:1, editorType: "dxCheckBox", label: { text: "Estimate Gas Usage" } ,cssClass: "mt-estimate-electric"},
                        { dataField: "acquisition",colSpan:1 },
                        //{ dataField: "earthDay" },
                                {
            dataField: "earthDay",
            editorType: "dxSelectBox",colSpan:1,
            label: { text: "Earth Day" },
            editorOptions: {
                dataSource: [2015, 2016, 2017, 2018, 2019, 2020],
                placeholder: "Select Year",
                showClearButton: true,    // gives a clear (X) button
                value: 2019                 // default to empty string
            }
        },{
            itemType: "empty",
            colSpan: 1 // empty column
        },

                    // comments full row
                            { dataField: "comments1", editorType: "dxTextArea",label:{text:"Location Comments"}, colSpan: 4 ,editorOptions: {
                height: 45
            },
            cssClass: "no-scroll-textarea" },
            { dataField: "energyThermostatsBool", editorType: "dxCheckBox", label: { text: "Smart Thermostats" } },
                                    { dataField: "energyStarAppliancesBool", editorType: "dxCheckBox", label: { text: "Energy Star Rated Appliances" } },
                                    { dataField: "energyBanSpaceHeatersBool", editorType: "dxCheckBox", label: { text: "Ban On Personal Heaters" } },
                                    { dataField: "energySolarOnsiteBool", editorType: "dxCheckBox", label: { text: "Solar Panels On Site" } },
                                    { dataField: "energyLED_LightingBool", editorType: "dxCheckBox", label: { text: "Energy LED Lighting" } },
                                    { dataField: "energyMotionLightingBool", editorType: "dxCheckBox", label: { text: "Energy Motion Lighting" } },
                                    { dataField: "energyCopiersAutoOffBool", editorType: "dxCheckBox", label: { text: "Energy Copiers Auto-Off" } },
                                    { dataField: "energyEV_ChargersBool", editorType: "dxCheckBox", label: { text: "Energy EV Chargers" } }               
        ]},
        {
                    itemType: "group",
                    caption: "Locations",
                    colCount: 4,
                    cssClass: "locations",
                    items: [
                            //{ dataField: "status" },
                            {
            dataField: "Status",
            editorType: "dxSelectBox",
            editorOptions: {
                dataSource: ["New", "Open", "Closed"],
                value: "New",        // ✅ always default to "New"
                searchEnabled: false,
                placeholder: "Select Status"
            },
            validationRules: [
            {
                type: "required",
                message: "Status is required"
            }
        ]
        },
                        { dataField: "Address",label:{text:"Address"} ,colSpan:2,validationRules: [
            {
                type: "required",
                message: "Address is required"
            }
        ]},
                            { dataField: "city" ,validationRules: [
            {
                type: "required",
                message: "City is required"
            }
        ]}
                    ]
                },

                {
                itemType: "group",
                caption: "Recycle Items",
                colCount: 5,
                cssClass: "recycle-group",
                items: [
                                     { dataField: "recyclePaperBool", editorType: "dxCheckBox", label: { text: "Recycle Paper" },editorOptions: {value: false }	,cssClass: "recycle-paper-field" },
                                { dataField: "recyclePlasticBool", editorType: "dxCheckBox", label: { text: "Recycle Plastic" },editorOptions: {value: false }	 },
                            { dataField: "recycleAluminumCansBool", editorType: "dxCheckBox", label: { text: "Recycle Aluminum Cans" },editorOptions: {value: false }	 },
                            { dataField: "recycleEWasteBool", editorType: "dxCheckBox", label: { text: "Recycle E-Waste" },editorOptions: {value: false }	 },
                            { dataField: "recycleCardboardBool", editorType: "dxCheckBox", label: { text: "Recycle Cardboard" } ,editorOptions: {value: false }	},
                            { dataField: "recycleCompostBool", editorType: "dxCheckBox", label: { text: "Recycle Compost" },editorOptions: {value: false }	 },
                            { dataField: "recycleBatteriesBool", editorType: "dxCheckBox", label: { text: "Recycle Batteries" },editorOptions: {value: false }	 },
                            { dataField: "waterDataBool", editorType: "dxCheckBox", label: { text: "Water Data" } ,editorOptions: {value: false }	},
        //                                 {
        //     dataField: "recycleGlass",
        //     editorType: "dxCheckBox",
        //     label: { text: "Recycle Glass" },
        //     editorOptions: {
        //         trueValue: "TRUE",     // what to send when checked
        //         falseValue: "FALSE",   // what to send when unchecked
        //         value: formData.recycleGlass  // current value
        //     }
        // }
         



                ]
            },
                    {
            itemType: "group",
            colCount: 2,   // two columns side by side
            cssClass: "form-buttons-row",
            items: [
                {
            itemType: "button",
            //horizontalAlignment: "left",
            buttonOptions: {
                text: "Create",
                type: "default",
                onClick: function(e) {
                    var formData = $("#formContainer").dxForm("instance").option("formData");
                    //var result = formContainer.validate();
                     var form = $("#formContainer").dxForm("instance");
                    var result = form.validate();
                    if (result.isValid) {
          formData.recyclePaper = formData.recyclePaperBool === true ? "True" : "False";
                  formData.RecyclePlastic = formData.RecyclePlasticBool === true ? "True" : "False";
        formData.RecycleGlass   = formData.recycleGlassBool   === true ? "True" : "False";
        formData.RecycleAluminumCans = formData.RecycleAluminumCansBool === true ? "True" : "False";
        formData.RecycleCardboard    = formData.RecycleCardboardBool    === true ? "True" : "False";
        formData.RecycleBatteries    = formData.RecycleBatteriesBool    === true ? "True" : "False";
        formData.RecycleEWaste       = formData.RecycleEWasteBool       === true ? "True" : "False";
        formData.RecycleCompost      = formData.RecycleCompostBool      === true ? "True" : "False";
        formData.WaterData           = formData.WaterDataBool           === true ? "True" : "False";
        formData.EnergyThermostats      = formData.EnergyThermostatsBool === true ? "True" : "False";
        formData.EnergyStarAppliances   = formData.EnergyStarAppliancesBool === true ? "True" : "False";
        formData.EnergyBanSpaceHeaters  = formData.EnergyBanSpaceHeatersBool === true ? "True" : "False";
        formData.EnergyCopiersAutoOff   = formData.EnergyCopiersAutoOffBool === true ? "True" : "False";
        formData.EnergyLED_Lighting     = formData.EnergyLED_LightingBool === true ? "True" : "False";
        formData.EnergyMotionLighting   = formData.EnergyMotionLightingBool === true ? "True" : "False";
        formData.EnergyEV_Chargers      = formData.EnergyEV_ChargersBool === true ? "True" : "False";
        formData.EnergySolarOnsite      = formData.EnergySolarOnsiteBool === true ? "True" : "False";
        formData.EstimateElectricUsage = formData.EstimateElectricUsageBool === true ? "True" : "False";
        formData.EstimateGasUsage = formData.EstimateGasUsageBool === true ? "True" : "False";
        formData.EarthDay = formData.EarthDay ? formData.EarthDay : "";
        formData.addressLine3 = formData.addressLine3 ? formData.addressLine3 : "";
        formData.ohPhase2 = formData.ohPhase2 ? formData.ohPhase2 : 0;
        formData.ohPhase3 = formData.ohPhase3 ? formData.ohPhase3 : 0;
        formData.ohPhase4 = formData.ohPhase4 ? formData.ohPhase4 : 0;
        formData.comments = formData.comments ? formData.comments : "";
        formData.visionCode = formData.visionCode ? formData.visionCode : 0;
        formData.adpWorkCode = formData.adpWorkCode ? formData.adpWorkCode : "";
        formData.adpHeadCount = formData.adpHeadCount ? formData.adpHeadCount : "";
        formData.visionHeadCount = formData.visionHeadCount ? formData.visionHeadCount : "";
        formData.Street = formData.Street ? formData.Street : "";
        formData.addressLine1 = formData.addressLine1 ? formData.addressLine1 : 0;
        formData.addressLine2 = formData.addressLine2 ? formData.addressLine2 : 0;
        formData.addressLine3 = formData.addressLine2 ? formData.addressLine3 : 0;
        formData.PrimFun = formData.PrimFun ? formData.PrimFun : 0;
        formData.htgfuel = formData.htgfuel ? formData.htgfuel : 0;
        formData.yearBuilt = formData.yearBuilt ? formData.yearBuilt : 0;
        //formData.stateProvince = formData.stateProvince ? formData.stateProvince : "";
        formData.stateProvince = formData.country ? formData.country : "";
        formData.netOfficeSF = formData.netOfficeSF ? formData.netOfficeSF : "";
        formData.officeSF = formData.officeSF ? formData.officeSF : 0;
        formData.acquisition = formData.acquisition ? formData.acquisition : 0;
        formData.comments1 = formData.comments1 ? formData.comments1 : 0;
        formData.energyDataSource = formData.energyDataSource ? formData.energyDataSource : 0;        
        

                    console.log("Form Data:", formData);

                    $.ajax({
                        url: "/Home/InsertOfficeDetails",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(formData),   // send as JSON
                        success: function(response) {
                            //DevExpress.ui.notify("Created successfully!", "success", 2000);
                              DevExpress.ui.notify({
            message: "Created successfully",
            type: "success",
            displayTime: 2000,
            position: {
                my: "center",    // where toast aligns itself
                at: "center",    // where on the screen
                of: window       // relative to the window
            }
        });
                            // Redirect if needed
                           // window.location.href = "/Home/Index";
                                setTimeout(function () {
            window.location.href = "/Home/Index";
        }, 5000);
                        },
                        error: function(xhr) {
                            DevExpress.ui.notify("Error while creating!", "error", 2000);
                        }
                    });}
                }
            }
        },
                {
            itemType: "button",
            cssClass: "btn-cancel",
            //horizontalAlignment: "right",
            buttonOptions: {
                text: "Cancel",
                type: "normal",
                onClick: function() {
                    DevExpress.ui.notify("Cancelled", "warning", 2000);
                    // Example: redirect or clear form
                     window.location.href = "/Home/Index";
                }
            }
        }
            ]
        }

            
                        

            ]
        });
        // $(".dx-field-item-content-location-right").css("margin-bottom", "-100px");


    </script>




    <style>
        .dx-list-item-content {
            font-size: x-small !important;
        }
        h3 {
            margin-top: -10px;
            margin-bottom: 15px;
            margin-left: 35px;
        }
        .card-box {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06); /* soft outer shadow */
            padding: 20px;
            border: 1px solid rgba(0, 0, 0, 0.04); /* light border */
            height: 1200px !important; 
            margin-left: 30px;
            margin-right: 30px;
        }
        .btn-cancel {
            margin-right: 500px; /* adjust as needed */
        }

        /* .form-buttons-row {
            margin-top: 20px;
            text-align: center;
        }

            .form-buttons-row .dx-button {
                margin: 0 10px; /* spacing between buttons */
            } */

        .recycle-group {
            margin-top: -75px; /* example */
            
            
        }

        /* Target this field specifically */
        .dx-field-item[data-field="recyclePaperBool"] {
            margin-bottom: -20px !important;
        }

            .dx-field-item[data-field="recyclePaperBool"] .dx-item-content.dx-box-item-content {
                margin-bottom: -20px !important;
            }




        .locations {
            margin-bottom: -80px; /* example */
        }

        .mt-estimate-electric {
            margin-top: -15px; /* adjust as needed */
        }

        .dx-form-group-with-caption .dx-form-group .dx-group-colcount-4 {
            margin-bottom: -100px !important;
        }

        /* Try higher specificity */
        div.dx-form-group-with-caption div.dx-form-group div.dx-group-colcount-4 {
            margin-bottom: -100px !important;
        }


        .no-scroll-textarea textarea {
            overflow-y: hidden !important;
        }
        
        /* .dx-form-group-with-caption .dx-form-group .dx-group-colcount-4 {
            margin-bottom: -100px !important;
        } */

        /* remove default margin between groups */
        .tight-form .edit-office-group {
            margin-bottom: 80px !important;
            padding-bottom: 0 !important;
            background-color:white;
        }


        body {
            margin: 0;
            font-family: 'Segoe UI', sans-serif;
            padding-left: 50px;
            padding-right: 50px;
            background-color: black;
        }

        /* Top dark bar with logo */
        .top-bar {
            /* background-color: #26004d;  Very dark purple */
            background-color: #2e0055; /* Slightly lighter purple */
            height: 60px;
            display: flex;
            align-items: center;
            padding-left: 20px;
        }

        .logo {
            height: 35px;
        }

        /* Bottom nav bar with title and menu */
        .nav-bar {
            /*background-color: #2e0055;  Slightly lighter purple */
            /*background-color: #26004d;  Very dark purple */
            background-color: black;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 5px 20px;
            border-top: 1px solid #4f2d70;
        }

        .card-box {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06); /* soft outer shadow */
            padding: 20px;
            /* border: 1px solid rgba(0, 0, 0, 0.04); */ /* light border */
            height: 800px;
        }

            .card-box label {
                /* font-weight: 600; */
                display: block;
                /*  margin-bottom: 8px; */
                color: #111;
                font-size:x-small;
            }

            .card-box select {
                width: 100%;
                padding: 10px 12px;
                font-size: 14px;
                border-radius: 6px;
                /* border: 1px solid #ccc; */
                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08); /* subtle dropdown shadow */
            }


        .app-title {
            color: white;
            font-size: 15px;
        }

        .nav-links {
            display: flex;
            gap: 20px;
            padding-right: 550px;
        }

            .nav-links a {
                color: white;
                text-decoration: none;
                /* font-size: 14px; */
                font-size: x-small;
            }

                .nav-links a.active {
                    font-weight: bold;
                    text-decoration: underline;
                }

        .dx-dropdowneditor.dx-dropdowneditor-field-clickable, .dx-dropdowneditor.dx-dropdowneditor-field-clickable .dx-texteditor-input {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06); /* soft outer shadow */
            border: 1px solid rgba(0, 0, 0, 0.04); /* light border */
            height: 20px !important;
        }

        .dx-texteditor-input {
            height: 20px !important;
            min-height: 20px !important;
            font-size: smaller !important;
        }

        /* .dx-texteditor-input#comments {
                        height: 45px !important;
                    } */
        label {
            font-size: small;
        }

        /* Style the DevExtreme DataGrid header row */
        .dx-datagrid .dx-header-row {
            background-color: #673A91 !important; /* Deep purple */
            color: white !important; /* White text */
            font-weight: bold !important; /* Bold text */
        }

        /* .dx-item {margin-bottom:-610px !important;} */
        .mb-20 {
            /* margin-bottom: -610px !important; */
        }


        /* Optional: Style individual header cells */
        .dx-datagrid .dx-header-row > td {
            /* border: 1px solid white; */ /* White cell borders (optional) */
        }

        * {
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        .settings,
        .user {
            margin-left: 15px;
            background: #4c2671;
            padding: 5px 10px;
            border-radius: 50%;
            text-align: center;
        }

        .main-container {
            padding: 30px;
            background-color: #d3d3d3;
            /* background-color: #e0e0e0; */
            /* background-color: #f5f5f5; */ 
            /* background-color: white; */
            height: 1300px;
        }

        h1 {
            font-size: 24px;
            /*  margin-bottom: 20px; */
        }

        .filters {
            display: flex;
            gap: 20px;
            /*  margin-bottom: 20px; */
        }

            .filters label {
                display: flex;
                flex-direction: column;
                font-weight: bold;
            }

        select {
            padding: 8px;
            width: 280px;
            margin-top: 5px;
        }

        .table-container {
            background: white;
            /* border: 1px solid #ddd; */
            border-radius: 8px;
            overflow-x: auto;
            padding: 20px;
        }

        .table-actions {
            display: flex;
            justify-content: space-between;
            /* margin-bottom: 15px; */
        }

            .table-actions input {
                padding: 8px;
                width: 200px;
            }

        .add-btn {
            padding: 8px 16px;
            background-color: #6a0dad;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        thead {
            background: #5d3a8a;
            color: white;
        }

        th, td {
            padding: 10px;
            /* border: 1px solid #ddd; */
            text-align: left;
            font-size: x-small;
        }

        a {
            color: #0044cc;
            text-decoration: none;
        }

        .pagination {
            margin-top: 10px;
            text-align: right;
            font-weight: bold;
        }
    </style>
</body>
</html>
